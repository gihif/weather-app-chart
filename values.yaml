# Default values for weather-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global parameters

# -- @param `nameOverride` String to partially override weather-app.fullname template (will maintain the release name) <br />
# default: `weather-app`
nameOverride: ""

# -- @param `fullnameOverride` String to fully override weather-app.fullname template
fullnameOverride: ""

# -- @param `imagePullSecrets` is Global Docker registry secret names as an array <br />
# e.g. <br />
# `imagePullSecrets:` <br />
# `  - myRegistryKeySecretName`
imagePullSecrets: []

# -- @param `commonLabels` Add labels to all the deployed resources
commonLabels: {}

# -- @param `commonAnnotations` Add annotations to all the deployed resources
commonAnnotations: {}

## @section Services Account parameters

# Pods Service Account
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- @param `serviceAccount.create` Specifies whether a service account should be created
  create: true
  # -- @param `serviceAccount.annotations` is Annotations to add to the service account
  annotations: {}
  # -- @param `serviceAccount.name` The name of the service account to use. <br />
  # If not set and create is true, a name is generated using the `weather-app.fullname` template
  name: ""

## @section for Deployment & App parameters

image:
  # -- @param `image.registry` is Container Registry where Weather App image stored
  registry: registry.gitlab.com/sayurbox-test
  # -- @param `image.repository` is Repository image name of Weather App image stored
  repository: weather-app-chart/web
  # -- @param `image.tag` to Overrides the image tag whose default is the chart appVersion.
  tag: ""
  # -- @param `image.command` to Overrides the default image command.
  command: ""
  # -- @param `image.pullPolicy` for Specifies pull policy method <br />
  # Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent' <br />
  # ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  pullPolicy: IfNotPresent

# -- @param `replicaCount` Number of Weather App replicas to deploy
replicaCount: 1

# -- @param `updateStrategy` is a Strategy how deployment will Rollout the Updates
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%

# -- @param `podAnnotations` Annotations for Weather App pods <br />
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# -- @param `podAffinityPreset` Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard` <br />
# ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
podAffinityPreset: ""

# -- @param `podAntiAffinityPreset` Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard` <br />
# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
podAntiAffinityPreset: ""

# Node affinity preset
# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
nodeAffinityPreset:
  # -- @param `nodeAffinityPreset.type` Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  type: ""
  # -- @param `nodeAffinityPreset.key` Node label key to match Ignored if `affinity` is set. <br />
  # E.g. <br />
  # key: "kubernetes.io/e2e-az-name"
  key: ""
  # -- @param `nodeAffinityPreset.values` Node label values to match. Ignored if `affinity` is set. <br />
  # E.g. <br />
  # `values:` <br />
  # `  - e2e-az1` <br />
  # `  - e2e-az2`
  values: []

# -- @param `affinity` Affinity for pod assignment <br />
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity <br />
# Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: app-deployment
              operator: In
              values:
                - "true"
            - key: db-deployment
              operator: In
              values:
                - "false"
            - key: monitoring-deployment
              operator: In
              values:
                - "false"

# -- @param `nodeSelector` Node labels for pod assignment. Evaluated as a template. <br />
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# -- @param `tolerations` Tolerations for pod assignment. Evaluated as a template. <br />
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: {}

# NGINX pods' Security Context.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  # -- @param `podSecurityContext.enabled` Enabled Weather app pods' Security Context
  enabled: false
  # -- @param `podSecurityContext.fsGroup` Set Weather app pod's Security Context fsGroup
  fsGroup: 1001
  # -- @param `podSecurityContext.sysctls` sysctl settings of the Weather App pods <br />
  # sysctl settings <br />
  # Example: <br />
  # `sysctls:` <br />
  # `- name: net.core.somaxconn` <br />
  # `  value: "10000"` <br />
  sysctls: []

# -- @param securityContext Set Weather app container's Security Context
# Example: <br />
# `securityContext:` <br />
# `  capabilities:` <br />
# `    drop:` <br />
# `    - ALL` <br />
# `  readOnlyRootFilesystem: true` <br />
# `  runAsNonRoot: true` <br />
# `  runAsUser: 1000`
securityContext: {}

# Configures the ports Weather app listens on
containerPorts:
  # -- @param `containerPorts.name` is a port name of Weather app container
  name: http
  # -- @param `containerPorts.number` is a port number of Weather app container
  number: 80
  # -- @param `containerPorts.protocol` is a port number of Weather app container
  protocol: TCP

# Weather app containers' liveness probe.
# ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
livenessProbe:
  # -- @param `livenessProbe.path` is path of livenessProbe
  path: /
  # -- @param `livenessProbe.initialDelaySeconds` Initial delay seconds for livenessProbe
  initialDelaySeconds: 30
  # -- @param `livenessProbe.periodSeconds` Period seconds for livenessProbe
  timeoutSeconds: 5
  # -- @param `livenessProbe.timeoutSeconds` Timeout seconds for livenessProbe
  periodSeconds: 10
  # -- @param `livenessProbe.failureThreshold` Failure threshold for livenessProbe
  failureThreshold: 6
  # -- @param `livenessProbe.successThreshold` Success threshold for livenessProbe
  successThreshold: 1

# NGINX containers' readiness probe.
# ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
readinessProbe:
  # -- @param `readinessProbe.path` is path of readinessProbe
  path: /
  # -- @param `readinessProbe.initialDelaySeconds` Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  # -- @param `readinessProbe.periodSeconds` Period seconds for readinessProbe
  timeoutSeconds: 3
  # -- @param `readinessProbe.timeoutSeconds` Timeout seconds for readinessProbe
  periodSeconds: 5
  # -- @param `readinessProbe.failureThreshold` Failure threshold for readinessProbe
  failureThreshold: 3
  # -- @param `readinessProbe.successThreshold` Success threshold for readinessProbe
  successThreshold: 1

# -- @param `terminationGracePeriodSeconds` is a specific time in seconds the pods will terminate
terminationGracePeriodSeconds: 90

# Weather app containers' resource requests and limits
# ref: https://kubernetes.io/docs/user-guide/compute-resources/
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources:
  # -- @param `resources.limits` The resources limits for the Weather app container <br />
  # Example: <br />
  # `limits:` <br />
  # `  cpu: 100m` <br />
  # `  memory: 128Mi`
  limits:
    cpu: 150m
    memory: 128Mi
  # -- @param `resources.requests` The requested resources for the Weather app container <br />
  # Examples: <br />
  # `requests:` <br />
  # `  cpu: 100m` <br />
  # `  memory: 128Mi`
  requests:
    cpu: 50m
    memory: 80Mi

## @section Services parameters

service:
  # -- @param `service.type` Service type
  type: ClusterIP
  # -- @param `service.portName` is a name of port will exposed 
  portName: http
  # -- @param `service.portNumber` is a number of port will exposed
  portNumber: 80
  # -- @param `service.portProtocol` is a protocol of port will exposed
  portProtocol: TCP
  # -- @param `service.sessionAffinity` is session affinity of service
  sessionAffinity: None








ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80


